#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import os
import sqlite3
from utils.hybrid_search import hybrid_search, get_search_statistics
from utils.vector_search import FAISSVectorStore
from config import EMBEDDING_DIMENSION, HYBRID_SEARCH_ENABLED, DEFAULT_TOP_K

def test_hybrid_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    print("üîÑ –¢–ï–°–¢ –ì–ò–ë–†–ò–î–ù–û–ì–û –ü–û–ò–°–ö–ê")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
    if not HYBRID_SEARCH_ENABLED:
        print("‚ùå –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = os.path.join(os.getcwd(), 'knowledge_base_v2.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    vector_store = None
    try:
        vector_store = FAISSVectorStore(embedding_dimension=EMBEDDING_DIMENSION)
        if vector_store.load_index():
            print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        else:
            print("‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            vector_store = None
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
        vector_store = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FTS –∏–Ω–¥–µ–∫—Å
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='chunks_fts'")
        if cursor.fetchone():
            print("‚úÖ FTS –∏–Ω–¥–µ–∫—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ö†Ô∏è FTS –∏–Ω–¥–µ–∫—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python build_fts_index.py")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ FTS: {e}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–¥–µ—Ñ–µ–∫—Ç—ã —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤",
        "—É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
        "—Ä–µ–Ω—Ç–≥–µ–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
    ]
    
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ò–ë–†–ò–î–ù–û–ì–û –ü–û–ò–°–ö–ê:")
    print("=" * 60)
    
    for i, query in enumerate(test_queries, 1):
        print(f"\n{i}. –ó–∞–ø—Ä–æ—Å: '{query}'")
        print("-" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞
            stats = get_search_statistics(query, vector_store, conn, DEFAULT_TOP_K)
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í–µ–∫—Ç–æ—Ä–Ω—ã–π={stats['vector_results']}, FTS={stats['fts_results']}, –ò—Ç–æ–≥–æ={stats['merged_results']}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
            results = hybrid_search(query, vector_store, conn, DEFAULT_TOP_K)
            
            if not results:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for j, result in enumerate(results, 1):
                search_type = result.get('search_type', 'unknown')
                doc_id = result.get('document_id', 'N/A')
                doc_type = result.get('doc_type_short', 'N/A')
                similarity = result.get('similarity', 0)
                
                type_label = 'üîç –í–ï–ö–¢–û–†–ù–´–ô' if search_type == 'vector' else 'üìù FTS'
                
                print(f"   {j}. [{type_label}] {doc_id} ({doc_type})")
                print(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {similarity:.3f}")
                print()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    conn.close()
    print("\nüëã –¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_hybrid_search() 