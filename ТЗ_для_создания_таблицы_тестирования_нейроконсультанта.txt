Техническое задание для создания таблицы тестирования нейроконсультанта
1. Цель
Создать таблицу для тестирования модели нейроконсультанта по схеме "вопрос-ответ" с автоматическим заполнением определённых колонок и поддержкой ручного заполнения тестером. Таблица должна быть интегрирована в основной код нейроконсультанта или реализована как отдельный модуль, обеспечивающий автоматическую запись результатов тестирования по заданным критериям.
2. Общие требования
•	Формат таблицы: Таблица должна содержать 8 колонок с указанными ниже характеристиками.
•	Интеграция: Таблица может быть реализована как часть основного кода нейроконсультанта или как отдельный скрипт/модуль, который взаимодействует с моделью через API или прямой доступ к логам.
•	Автоматизация: Колонки 2, 4, 6, 7, 8 должны заполняться автоматически во время тестирования.
•	Ручное заполнение: Колонки 3 и 5 заполняются тестировщиком вручную.
•	Хранение данных: Таблица сохраняется в формате CSV или базы данных (например, SQLite) для удобного анализа.
•	Язык программирования: Python (предпочтительно, но можно адаптировать под другой язык, если это обосновано).
•	База знаний (БЗ): Модель использует базу знаний, разбитую на чанки или векторные представления, которые должны быть отражены в колонке 8.
3. Структура таблицы
Таблица состоит из 8 колонок:
1.	Вопрос пользователя (тестировщика) 
o	Тип данных: Текст (строка). 
o	Описание: Вопрос, который тестировщик задаёт нейроконсультанту. 
o	Заполнение: Вводится вручную тестировщиком перед запуском теста или загружается из заранее подготовленного списка вопросов.
2.	Ответ нейроконсультанта 
o	Тип данных: Текст (строка). 
o	Описание: Ответ, сгенерированный моделью на заданный вопрос. 
o	Заполнение: Автоматически, через захват вывода модели.
3.	Оценка ответа 
o	Тип данных: Целое число (от -2 до +2). 
o	Описание: Оценка качества ответа, выставляемая тестировщиком вручную по шкале: 
	-2: Полностью неверный или нерелевантный ответ. 
	-1: Частично неверный или недостаточно полный ответ. 
	0: Нейтральный ответ (среднее качество). 
	+1: Хороший, но не идеальный ответ. 
	+2: Идеальный, точный и полный ответ.
o	Заполнение: Вручную тестировщиком после анализа ответа.
4.	Количество токенов на вопрос/ответ 
o	Тип данных: Целое число. 
o	Описание: Суммарное количество токенов, использованных для обработки вопроса и генерации ответа (включая входные и выходные токены). 
o	Заполнение: Автоматически, с использованием API модели (например, через атрибуты ответа от модели, такие как usage в API OpenAI или аналогов).
5.	Комментарий 
o	Тип данных: Текст (строка). 
o	Описание: Поле для комментариев тестировщика о качестве ответа, причинах оценки или других замечаниях. 
o	Заполнение: Вручную тестировщиком.
6.	Время на генерацию ответа 
o	Тип данных: Число с плавающей точкой (в секундах). 
o	Описание: Время, затраченное на генерацию ответа моделью (от момента получения вопроса до завершения вывода). 
o	Заполнение: Автоматически, с использованием таймера в коде (например, time.time() в Python).
7.	Цена (стоимость) генерации 
o	Тип данных: Число с плавающей точкой (в условных единицах, например, USD). 
o	Описание: Стоимость генерации ответа, рассчитанная на основе количества токенов и тарифов API модели (например, $0.0001 за токен). 
o	Заполнение: Автоматически, на основе данных о токенах и заранее заданной стоимости за токен.
8.	Чанки 
o	Тип данных: Текст или JSON (список идентификаторов чанков или векторов). 
o	Описание: Список чанков или векторных представлений из базы знаний, которые модель использовала для формирования ответа. 
o	Заполнение: Автоматически, с использованием механизма извлечения релевантных чанков (например, через векторное хранилище, такое как FAISS, или логи модели).
4. Технические требования к реализации
4.1. Автоматическое заполнение колонок
•	Ответ нейроконсультанта: Код должен захватывать полный текст ответа модели, исключая служебные сообщения (если есть).
•	Количество токенов: Использовать API модели для получения данных о токенах (например, response.usage.total_tokens в API OpenAI). Если API не предоставляет такие данные, реализовать подсчёт токенов с помощью токенизатора (например, tiktoken для моделей GPT).
•	Время генерации: Замерять время от начала обработки вопроса до получения полного ответа с помощью библиотеки time (Python) или аналогов.
•	Цена генерации: Рассчитывать как произведение количества токенов на стоимость одного токена (значение задаётся в конфигурации).
•	Чанки: 
o	Если база знаний разбита на чанки, код должен логировать, какие чанки (по их ID или содержимому) были извлечены для ответа. 
o	Если используется векторное хранилище (например, FAISS), код должен возвращать идентификаторы или метаданные ближайших векторов, использованных для ответа. 
o	Формат записи: JSON-строка с массивом чанков, например, ["chunk_001", "chunk_002"] или [{"id": "chunk_001", "text": "Текст чанка"}].
4.2. Ручное заполнение
•	Для колонок 3 (Оценка) и 5 (Комментарий) предоставить интерфейс для ввода данных тестировщиком: 
o	Вариант 1: Через консольный ввод (например, input() в Python). 
o	Вариант 2: Через графический интерфейс (например, с использованием tkinter или веб-интерфейса на Flask/Django). 
o	Вариант 3: Через редактирование CSV-файла или базы данных после автоматического заполнения остальных колонок.
4.3. Хранение данных
•	Формат хранения: 
o	CSV-файл с заголовками колонок. 
o	Альтернатива: SQLite база данных с таблицей, где каждая строка соответствует одному тесту.
•	Пример структуры CSV:
•	Вопрос,Ответ,Оценка,Токены,Комментарий,Время,Цена,Чанки
•	"Как работает нейросеть?","Нейросеть обрабатывает данные...",-1,150,"Ответ неполный",2.34,0.015,"[""chunk_001"", ""chunk_002""]"
4.4. Примерный алгоритм работы
1.	Тестировщик вводит вопрос или загружает список вопросов.
2.	Код отправляет вопрос нейроконсультанту через API или прямой вызов модели.
3.	Замеряется время генерации ответа.
4.	Код получает ответ, количество токенов и информацию о чанках.
5.	Рассчитывается стоимость генерации.
6.	Данные записываются в таблицу (колонки 1, 2, 4, 6, 7, 8).
7.	Тестировщик вручную заполняет колонки 3 и 5.
8.	Таблица сохраняется в CSV или базе данных.
5. Пример кода (Python)
import time import csv import json import tiktoken # Для подсчёта токенов (если API не предоставляет данные) from datetime import datetime # Предполагается, что есть модуль для работы с моделью и БЗ from model_api import NeuroConsultant from vector_store import VectorStore 
class TestTable:
def init(self, output_file="test_results.csv", token_price=0.0001):
self.output_file = output_file
self.token_price = token_price
self.headers = ["Вопрос", "Ответ", "Оценка", "Токены", "Комментарий", "Время", "Цена", "Чанки"]
self.model = NeuroConsultant()
self.vector_store = VectorStore()
# Создаём CSV-файл с заголовками, если он не существует
with open(self.output_file, mode="a", newline="", encoding="utf-8") as f:
writer = csv.writer(f)
if f.tell() == 0:
writer.writerow(self.headers)
def run_test(self, question):
    # Замер времени
    start_time = time.time()
    
    # Получение ответа и чанков
    response = self.model.get_response(question)
    answer = response["text"]
    chunks = self.vector_store.get_relevant_chunks(question)
    chunks_json = json.dumps([chunk["id"] for chunk in chunks], ensure_ascii=False)
    
    # Подсчёт токенов
    try:
        tokens = response["usage"]["total_tokens"]
    except KeyError:
        encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")  # Адаптировать под модель
        tokens = len(encoding.encode(question)) + len(encoding.encode(answer))
    
    # Время генерации
    generation_time = time.time() - start_time
    
    # Стоимость
    cost = tokens * self.token_price
    
    # Запрашиваем оценку и комментарий у тестировщика
    print(f"Вопрос: {question}")
    print(f"Ответ: {answer}")
    score = input("Введите оценку (-2 до +2): ")
    comment = input("Введите комментарий: ")
    
    # Записываем данные в CSV
    with open(self.output_file, mode="a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([question, answer, score, tokens, comment, generation_time, cost, chunks_json])

def run_tests_from_file(self, questions_file):
    with open(questions_file, "r", encoding="utf-8") as f:
        questions = [line.strip() for line in f if line.strip()]
    for question in questions:
        self.run_test(question)
if name == "main":
tester = TestTable()
# Пример одиночного теста
tester.run_test("Как работает нейросеть?")
# Пример теста из файла
# tester.run_tests_from_file("questions.txt")


•	Проверка чанков: Убедиться, что в колонке 8 указаны корректные чанки, соответствующие содержимому ответа.
7. Дополнительные пожелания
•	Реализовать возможность экспорта таблицы в Excel для удобства анализа.
•	Добавить логирование ошибок (например, если модель не ответила или API вернул ошибку).
•	Предусмотреть конфигурационный файл для задания стоимости токена, пути к файлам и других параметров.

