#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã FTS –ø–æ–∏—Å–∫–∞
"""

import os
import sqlite3
import sys
from utils.fts_search import fts_search
from config import FTS_ENABLED, FTS_DEFAULT_LIMIT

def test_fts_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç FTS –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    print("üìù –¢–ï–°–¢ FTS –ü–û–ò–°–ö–ê")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ FTS
    if not FTS_ENABLED:
        print("‚ùå FTS –ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = os.path.join(os.getcwd(), 'knowledge_base_v2.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python load_excel_to_vectordb.py")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FTS –∏–Ω–¥–µ–∫—Å
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ FTS —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='chunks_fts'")
        if not cursor.fetchone():
            print("‚ùå FTS —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python build_fts_index.py")
            conn.close()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ FTS
        cursor.execute("SELECT COUNT(*) FROM chunks_fts")
        fts_count = cursor.fetchone()[0]
        print(f"‚úÖ FTS –∏–Ω–¥–µ–∫—Å —Å–æ–¥–µ—Ä–∂–∏—Ç {fts_count} –∑–∞–ø–∏—Å–µ–π")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ FTS –∏–Ω–¥–µ–∫—Å–∞: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–¥–µ—Ñ–µ–∫—Ç—ã —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤",
        "—É–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å", 
        "—Ä–µ–Ω—Ç–≥–µ–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
        "–º–∞–≥–Ω–∏—Ç–æ–ø–æ—Ä–æ—à–∫–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å"
    ]
    
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ FTS –ü–û–ò–°–ö–ê:")
    print("=" * 60)
    
    for i, query in enumerate(test_queries, 1):
        print(f"\n{i}. –ó–∞–ø—Ä–æ—Å: '{query}'")
        print("-" * 40)
        
        try:
            # –ü–æ–∏—Å–∫ –ø–æ FTS
            results = fts_search(query, limit=FTS_DEFAULT_LIMIT)
            
            if not results:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for j, result in enumerate(results, 1):
                doc_id = result.get('document_id', 'N/A')
                doc_type = result.get('doc_type_short', 'N/A')
                rank = result.get('rank', 0)
                snippet = result.get('snippet', '')
                
                print(f"   {j}. –î–æ–∫—É–º–µ–Ω—Ç: {doc_id} ({doc_type})")
                print(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {rank:.3f}")
                print(f"      –û—Ç—Ä—ã–≤–æ–∫: {snippet}")
                print()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    print("\nüëã –¢–µ—Å—Ç FTS –ø–æ–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_fts_search() 