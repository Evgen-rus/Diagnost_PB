"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º FTS5.
"""
import sqlite3
import logging
from typing import List, Dict, Any
import os
from config import DEFAULT_TOP_K

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –º–æ–¥—É–ª—è FTS –ø–æ–∏—Å–∫–∞
fts_logger = logging.getLogger('fts_search')

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.path.join(os.getcwd(), 'knowledge_base_v2.db')

def fts_search(query: str, limit: int = DEFAULT_TOP_K) -> List[Dict[str, Any]]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ FTS5 –∏–Ω–¥–µ–∫—Å—É.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–∞—Ö
    """
    results = []
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ FTS —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='chunks_fts'")
        if not cursor.fetchone():
            fts_logger.error("FTS —Ç–∞–±–ª–∏—Ü–∞ 'chunks_fts' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python build_fts_index.py")
            return results
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è FTS –ø–æ–∏—Å–∫–∞
        escaped_query = query.replace('"', '""')
        
        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è FTS –ø–æ–∏—Å–∫–∞
        sql = """
        SELECT 
            chunks.chunk_id,
            chunks.document_id,
            chunks.doc_type_short,
            chunks.chunk_text,
            chunks.id,
            bm25(chunks_fts) AS rank,
            snippet(chunks_fts, 0, '<b>', '</b>', '...', 10) AS snippet
        FROM chunks_fts
        JOIN chunks ON chunks.id = chunks_fts.rowid
        WHERE chunks_fts MATCH ?
        ORDER BY rank
        LIMIT ?
        """
        
        cursor.execute(sql, (escaped_query, limit))
        rows = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        column_names = [description[0] for description in cursor.description]
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        for row in rows:
            result = {}
            for i, value in enumerate(row):
                result[column_names[i]] = value
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
            result['id'] = result['chunk_id']
            result['content'] = result['chunk_text']
            result['text'] = result['chunk_text']
            result['doc_id'] = result['document_id']
            result['document_title'] = result['document_id']
            result['similarity'] = abs(result['rank'])
            result['search_type'] = 'fts'
            
            results.append(result)
        
        fts_logger.info(f"FTS –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∞—à–µ–ª {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
    except sqlite3.Error as e:
        fts_logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ FTS –ø–æ–∏—Å–∫–µ: {str(e)}")
    except Exception as e:
        fts_logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ FTS –ø–æ–∏—Å–∫–µ: {str(e)}", exc_info=True)
    finally:
        if conn:
            conn.close()
    
    return results

def merge_results(vec_results: List[Dict[str, Any]], fts_results: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏ FTS –ø–æ–∏—Å–∫–∞, —É–±–∏—Ä–∞—è –¥—É–±–ª–∏.
    
    Args:
        vec_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        fts_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã FTS –ø–æ–∏—Å–∫–∞
        
    Returns:
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∑ –¥—É–±–ª–µ–π
    """
    seen_ids = set()
    merged_results = []
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    for result in vec_results:
        chunk_id = result.get('chunk_id', result.get('id'))
        if chunk_id and chunk_id not in seen_ids:
            result['search_type'] = 'vector'
            merged_results.append(result)
            seen_ids.add(chunk_id)
    
    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã FTS –ø–æ–∏—Å–∫–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
    for result in fts_results:
        chunk_id = result.get('chunk_id', result.get('id'))
        if chunk_id and chunk_id not in seen_ids:
            merged_results.append(result)
            seen_ids.add(chunk_id)
    
    fts_logger.info(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(merged_results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤–µ–∫—Ç–æ—Ä–Ω—ã–π: {len(vec_results)}, FTS: {len(fts_results)})")
    
    return merged_results

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_queries = ["–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "–∞–Ω–∞–ª–∏–∑", "–ª–µ—á–µ–Ω–∏–µ"]
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FTS –ü–û–ò–°–ö–ê")
    print("=" * 60)
    
    for i, query in enumerate(test_queries, 1):
        print(f"{i}. –ó–∞–ø—Ä–æ—Å: '{query}'")
        print("-" * 40)
        
        results = fts_search(query, limit=3)
        
        if results:
            for j, result in enumerate(results, 1):
                doc_id = result.get('document_id', 'N/A')
                doc_type = result.get('doc_type_short', 'N/A')
                rank = result.get('rank', 0)
                snippet = result.get('snippet', '')
                
                print(f"   {j}. –î–æ–∫—É–º–µ–Ω—Ç: {doc_id} ({doc_type})")
                print(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {rank:.3f}")
                print(f"      –û—Ç—Ä—ã–≤–æ–∫: {snippet}")
                print()
        else:
            print("   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print() 