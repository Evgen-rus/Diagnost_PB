#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Excel —Ñ–∞–π–ª–æ–≤

–û–ø–∏—Å–∞–Ω–∏–µ: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import warnings
import sys
import logging
from datetime import datetime
import argparse
import glob

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'sans-serif']
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/database_analysis.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


def find_excel_files() -> list:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Excel —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    list: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ Excel —Ñ–∞–π–ª–∞–º
    """
    patterns = ['*.xlsx', '*.xls', '*.xlsm']
    excel_files = []
    
    for pattern in patterns:
        excel_files.extend(glob.glob(pattern))
    
    return sorted(excel_files)


def interactive_mode_selection() -> dict:
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    dict: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–ª–∏ None –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ
    """
    print("\nüéØ –í–´–ë–ï–†–ò–¢–ï –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´:")
    print("=" * 60)
    
    modes = [
        {
            'id': 1,
            'name': 'üëÅÔ∏è  –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞',
            'description': '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ–±–∑–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤',
            'mode': 'preview'
        },
        {
            'id': 2, 
            'name': 'üî• –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
            'description': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ + –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ + –æ—Ç—á–µ—Ç',
            'mode': 'full'
        },
        {
            'id': 3,
            'name': '‚ö° –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑',
            'description': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ + –æ—Ç—á–µ—Ç (–ë–ï–ó –≥—Ä–∞—Ñ–∏–∫–æ–≤)',
            'mode': 'quick'
        },
        {
            'id': 4,
            'name': 'üìä –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π',
            'description': '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –±–µ–∑ GUI',
            'mode': 'no_viz'
        },
        {
            'id': 5,
            'name': '‚ùå –í—ã—Ö–æ–¥',
            'description': '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É',
            'mode': 'exit'
        }
    ]
    
    for mode in modes:
        print(f"{mode['id']:2d}. {mode['name']}")
        print(f"     {mode['description']}")
    
    print("=" * 60)
    
    while True:
        try:
            choice = input(f"üëâ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-{len(modes)}): ").strip()
            
            if not choice:
                continue
            
            choice_num = int(choice)
            
            if 1 <= choice_num <= len(modes):
                selected_mode = modes[choice_num - 1]
                
                if selected_mode['mode'] == 'exit':
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    return None
                
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {selected_mode['name']}")
                return selected_mode
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(modes)}")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        except KeyboardInterrupt:
            print("\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return None


def interactive_file_selection() -> str:
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Excel —Ñ–∞–π–ª–æ–≤
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    str: –ü—É—Ç—å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –µ—Å–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ
    """
    excel_files = find_excel_files()
    
    if not excel_files:
        print("‚ùå –í —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .xlsx, .xls –∏–ª–∏ .xlsm")
        return None
    
    print("\nüìÅ –î–û–°–¢–£–ü–ù–´–ï EXCEL –§–ê–ô–õ–´:")
    print("=" * 60)
    
    for i, file_path in enumerate(excel_files, 1):
        file_size = Path(file_path).stat().st_size / 1024**2  # —Ä–∞–∑–º–µ—Ä –≤ –ú–ë
        print(f"{i:2d}. {file_path:<40} ({file_size:.2f} –ú–ë)")
    
    print(f"{len(excel_files)+1:2d}. ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä")
    print("=" * 60)
    
    while True:
        try:
            choice = input(f"üëâ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (1-{len(excel_files)+1}): ").strip()
            
            if not choice:
                continue
            
            choice_num = int(choice)
            
            if choice_num == len(excel_files) + 1:
                print("üö´ –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω")
                return None
            
            if 1 <= choice_num <= len(excel_files):
                selected_file = excel_files[choice_num - 1]
                print(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selected_file}")
                return selected_file
            else:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(excel_files)+1}")
                
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        except KeyboardInterrupt:
            print("\nüö´ –í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return None


def quick_preview_mode(file_path: str):
    """
    –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel —Ñ–∞–π–ª–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    file_path (str): –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    """
    print("üîç –ë–´–°–¢–†–´–ô –ü–†–û–°–ú–û–¢–† –§–ê–ô–õ–ê")
    print("=" * 60)
    print(f"üìÑ –§–∞–π–ª: {file_path}")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not Path(file_path).exists():
            print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        data = pd.read_excel(file_path, engine='openpyxl')
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data.shape[0]} —Å—Ç—Ä–æ–∫ √ó {data.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
        print(f"üíæ –†–∞–∑–º–µ—Ä –≤ –ø–∞–º—è—Ç–∏: {data.memory_usage(deep=True).sum() / 1024**2:.2f} –ú–ë")
        
        print("\nüìã –°–¢–û–õ–ë–¶–´ –ò –¢–ò–ü–´ –î–ê–ù–ù–´–•:")
        print("-" * 60)
        for i, (col, dtype) in enumerate(data.dtypes.items(), 1):
            non_null = data[col].count()
            null_count = len(data) - non_null
            print(f"{i:2d}. {col:<30} | {str(dtype):<15} | –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {non_null}/{len(data)} ({null_count} –ø—Ä–æ–ø—É—Å–∫–æ–≤)")
        
        print(f"\nüìà –ü–ï–†–í–´–ï 5 –°–¢–†–û–ö:")
        print("-" * 60)
        print(data.head().to_string())
        
        print(f"\nüìä –ü–û–°–õ–ï–î–ù–ò–ï 5 –°–¢–†–û–ö:")
        print("-" * 60)
        print(data.tail().to_string())
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∏—Å–ª–æ–≤—ã–º —Å—Ç–æ–ª–±—Ü–∞–º
        numeric_cols = data.select_dtypes(include=['number']).columns
        if len(numeric_cols) > 0:
            print(f"\nüî¢ –ß–ò–°–õ–û–í–´–ï –°–¢–û–õ–ë–¶–´ (–∫—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞):")
            print("-" * 60)
            print(data[numeric_cols].describe().round(2).to_string())
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
        text_cols = data.select_dtypes(include=['object']).columns
        if len(text_cols) > 0:
            print(f"\nüìù –¢–ï–ö–°–¢–û–í–´–ï –°–¢–û–õ–ë–¶–´:")
            print("-" * 60)
            for col in text_cols:
                unique_count = data[col].nunique()
                print(f"{col}: {unique_count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
                if unique_count <= 10:
                    print(f"  –ó–Ω–∞—á–µ–Ω–∏—è: {list(data[col].unique())}")
                else:
                    top_values = data[col].value_counts().head(3)
                    print(f"  –¢–æ–ø-3: {dict(top_values)}")
        
        print(f"\n‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∂–∏–º –≤ –º–µ–Ω—é")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        print(f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")


class DatabaseAnalyzer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
    
    –ú–µ—Ç–æ–¥—ã:
    - load_data(): –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞
    - basic_info(): –í—ã–≤–æ–¥–∏—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
    - check_data_quality(): –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    - statistical_analysis(): –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    - generate_visualizations(): –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    - generate_report(): –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    """
    
    def __init__(self, file_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        file_path (str): –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        """
        self.file_path = file_path
        self.data = None
        self.report = {}
        self.analysis_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.output_dir = Path("analysis_results")
        self.output_dir.mkdir(exist_ok=True)
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ñ–∞–π–ª–∞: {file_path}")
    
    def load_data(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel —Ñ–∞–π–ª–∞
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        
        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        Exception: –ü—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        """
        try:
            if not Path(self.file_path).exists():
                raise FileNotFoundError(f"–§–∞–π–ª {self.file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞...")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            try:
                self.data = pd.read_excel(self.file_path, engine='openpyxl')
            except Exception:
                self.data = pd.read_excel(self.file_path, engine='xlrd')
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –†–∞–∑–º–µ—Ä: {self.data.shape}")
            return True
            
        except FileNotFoundError as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def basic_info(self) -> dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        if self.data is None:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return {}
        
        logger.info("–ê–Ω–∞–ª–∏–∑ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        
        info = {
            '–æ–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç—Ä–æ–∫': len(self.data),
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç–æ–ª–±—Ü–æ–≤': len(self.data.columns),
            '–Ω–∞–∑–≤–∞–Ω–∏—è_—Å—Ç–æ–ª–±—Ü–æ–≤': list(self.data.columns),
            '—Ç–∏–ø—ã_–¥–∞–Ω–Ω—ã—Ö': dict(self.data.dtypes.astype(str)),
            '—Ä–∞–∑–º–µ—Ä_–≤_–ø–∞–º—è—Ç–∏_–º–±': round(self.data.memory_usage(deep=True).sum() / 1024**2, 2)
        }
        
        self.report['–±–∞–∑–æ–≤–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'] = info
        
        print("\n" + "="*60)
        print("–ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ê–ù–ù–´–•")
        print("="*60)
        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {info['–æ–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç—Ä–æ–∫']}")
        print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {info['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç–æ–ª–±—Ü–æ–≤']}")
        print(f"üíæ –†–∞–∑–º–µ—Ä –≤ –ø–∞–º—è—Ç–∏: {info['—Ä–∞–∑–º–µ—Ä_–≤_–ø–∞–º—è—Ç–∏_–º–±']} –ú–ë")
        print(f"üìë –°—Ç–æ–ª–±—Ü—ã: {', '.join(info['–Ω–∞–∑–≤–∞–Ω–∏—è_—Å—Ç–æ–ª–±—Ü–æ–≤'])}")
        
        return info
    
    def check_data_quality(self) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: –û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö
        """
        if self.data is None:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return {}
        
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö...")
        
        quality_report = {}
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        missing_data = self.data.isnull().sum()
        missing_percentage = (missing_data / len(self.data)) * 100
        
        quality_report['–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ_–∑–Ω–∞—á–µ–Ω–∏—è'] = {
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': dict(missing_data[missing_data > 0]),
            '–ø—Ä–æ—Ü–µ–Ω—Ç': dict(missing_percentage[missing_percentage > 0])
        }
        
        # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        duplicates = self.data.duplicated().sum()
        quality_report['–¥—É–±–ª–∏–∫–∞—Ç—ã'] = {
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': duplicates,
            '–ø—Ä–æ—Ü–µ–Ω—Ç': round((duplicates / len(self.data)) * 100, 2)
        }
        
        # –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
        unique_values = {}
        for col in self.data.columns:
            unique_count = self.data[col].nunique()
            unique_values[col] = {
                '—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–∑–Ω–∞—á–µ–Ω–∏–π': unique_count,
                '–ø—Ä–æ—Ü–µ–Ω—Ç_—É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏': round((unique_count / len(self.data)) * 100, 2)
            }
        
        quality_report['—É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å'] = unique_values
        
        self.report['–∫–∞—á–µ—Å—Ç–≤–æ_–¥–∞–Ω–Ω—ã—Ö'] = quality_report
        
        print("\n" + "="*60)
        print("–ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•")
        print("="*60)
        
        if quality_report['–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ_–∑–Ω–∞—á–µ–Ω–∏—è']['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']:
            print("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
            for col, count in quality_report['–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ_–∑–Ω–∞—á–µ–Ω–∏—è']['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'].items():
                percent = quality_report['–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ_–∑–Ω–∞—á–µ–Ω–∏—è']['–ø—Ä–æ—Ü–µ–Ω—Ç'][col]
                print(f"   {col}: {count} ({percent:.1f}%)")
        else:
            print("‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        print(f"üîÑ –î—É–±–ª–∏–∫–∞—Ç—ã: {duplicates} ({quality_report['–¥—É–±–ª–∏–∫–∞—Ç—ã']['–ø—Ä–æ—Ü–µ–Ω—Ç']}%)")
        
        return quality_report
    
    def statistical_analysis(self) -> dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
        """
        if self.data is None:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return {}
        
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...")
        
        stats = {}
        
        # –ê–Ω–∞–ª–∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        numeric_columns = self.data.select_dtypes(include=[np.number]).columns
        if len(numeric_columns) > 0:
            stats['—á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã'] = {}
            for col in numeric_columns:
                col_stats = {
                    '—Å—Ä–µ–¥–Ω–µ–µ': round(self.data[col].mean(), 2),
                    '–º–µ–¥–∏–∞–Ω–∞': round(self.data[col].median(), 2),
                    '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ_–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ': round(self.data[col].std(), 2),
                    '–º–∏–Ω–∏–º—É–º': self.data[col].min(),
                    '–º–∞–∫—Å–∏–º—É–º': self.data[col].max(),
                    '–∫–≤–∞—Ä—Ç–∏–ª–∏': {
                        'Q1': round(self.data[col].quantile(0.25), 2),
                        'Q3': round(self.data[col].quantile(0.75), 2)
                    }
                }
                stats['—á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã'][col] = col_stats
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        text_columns = self.data.select_dtypes(include=['object']).columns
        if len(text_columns) > 0:
            stats['—Ç–µ–∫—Å—Ç–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã'] = {}
            for col in text_columns:
                col_stats = {
                    '—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–∑–Ω–∞—á–µ–Ω–∏–π': self.data[col].nunique(),
                    '—Å–∞–º—ã–µ_—á–∞—Å—Ç—ã–µ': dict(self.data[col].value_counts().head(5)),
                    '—Å—Ä–µ–¥–Ω—è—è_–¥–ª–∏–Ω–∞_—Ç–µ–∫—Å—Ç–∞': round(self.data[col].astype(str).str.len().mean(), 2) if self.data[col].dtype == 'object' else None
                }
                stats['—Ç–µ–∫—Å—Ç–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã'][col] = col_stats
        
        # –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç
        date_columns = self.data.select_dtypes(include=['datetime64']).columns
        if len(date_columns) > 0:
            stats['—Å—Ç–æ–ª–±—Ü—ã_–¥–∞—Ç'] = {}
            for col in date_columns:
                col_stats = {
                    '–¥–∏–∞–ø–∞–∑–æ–Ω_–¥–∞—Ç': {
                        '–Ω–∞—á–∞–ª–æ': str(self.data[col].min()),
                        '–∫–æ–Ω–µ—Ü': str(self.data[col].max())
                    },
                    '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–¥–∞—Ç': self.data[col].nunique()
                }
                stats['—Å—Ç–æ–ª–±—Ü—ã_–¥–∞—Ç'][col] = col_stats
        
        self.report['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'] = stats
        
        print("\n" + "="*60)
        print("–°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó")
        print("="*60)
        
        if '—á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã' in stats:
            print("üìä –ß–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã:")
            for col, col_stats in stats['—á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã'].items():
                print(f"   {col}:")
                print(f"     –°—Ä–µ–¥–Ω–µ–µ: {col_stats['—Å—Ä–µ–¥–Ω–µ–µ']}")
                print(f"     –ú–µ–¥–∏–∞–Ω–∞: {col_stats['–º–µ–¥–∏–∞–Ω–∞']}")
                print(f"     –î–∏–∞–ø–∞–∑–æ–Ω: {col_stats['–º–∏–Ω–∏–º—É–º']} - {col_stats['–º–∞–∫—Å–∏–º—É–º']}")
        
        if '—Ç–µ–∫—Å—Ç–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã' in stats:
            print("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã:")
            for col, col_stats in stats['—Ç–µ–∫—Å—Ç–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã'].items():
                print(f"   {col}: {col_stats['—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–∑–Ω–∞—á–µ–Ω–∏–π']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        
        return stats
    
    def generate_visualizations(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        
        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        """
        if self.data is None:
            logger.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        
        try:
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            plt.style.use('default')
            sns.set_palette("husl")
            
            # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            numeric_cols = self.data.select_dtypes(include=[np.number]).columns
            text_cols = self.data.select_dtypes(include=['object']).columns
            
            total_plots = len(numeric_cols) + min(len(text_cols), 3)
            
            if total_plots == 0:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–π —Ñ–∏–≥—É—Ä—ã
            fig_rows = (total_plots + 1) // 2
            fig, axes = plt.subplots(fig_rows, 2, figsize=(15, 5 * fig_rows))
            if fig_rows == 1:
                axes = axes.reshape(1, -1)
            
            plot_idx = 0
            
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in numeric_cols:
                row, col_idx = plot_idx // 2, plot_idx % 2
                self.data[col].hist(bins=30, ax=axes[row, col_idx], alpha=0.7)
                axes[row, col_idx].set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {col}')
                axes[row, col_idx].set_xlabel(col)
                axes[row, col_idx].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
                plot_idx += 1
            
            # –î–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ (—Ç–æ–ø-10 –∑–Ω–∞—á–µ–Ω–∏–π)
            for i, col in enumerate(text_cols[:3]):
                if plot_idx >= total_plots:
                    break
                
                row, col_idx = plot_idx // 2, plot_idx % 2
                top_values = self.data[col].value_counts().head(10)
                
                if len(top_values) > 0:
                    top_values.plot(kind='bar', ax=axes[row, col_idx])
                    axes[row, col_idx].set_title(f'–¢–æ–ø-10 –∑–Ω–∞—á–µ–Ω–∏–π: {col}')
                    axes[row, col_idx].set_xlabel(col)
                    axes[row, col_idx].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                    axes[row, col_idx].tick_params(axis='x', rotation=45)
                
                plot_idx += 1
            
            # –°–∫—Ä—ã—Ç–∏–µ –ø—É—Å—Ç—ã—Ö —Å—É–±–ø–ª–æ—Ç–æ–≤
            for i in range(plot_idx, fig_rows * 2):
                row, col_idx = i // 2, i % 2
                axes[row, col_idx].set_visible(False)
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            viz_path = self.output_dir / f"visualizations_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            plt.savefig(viz_path, dpi=300, bbox_inches='tight')
            plt.show()
            
            logger.info(f"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {viz_path}")
            print(f"üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {viz_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
    
    def generate_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—á–µ—Ç–∞
        """
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        report_path = self.output_dir / f"analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê EXCEL –§–ê–ô–õ–ê\n")
            f.write("=" * 60 + "\n")
            f.write(f"–§–∞–π–ª: {self.file_path}\n")
            f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {self.analysis_date}\n\n")
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if '–±–∞–∑–æ–≤–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' in self.report:
                f.write("–ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø\n")
                f.write("-" * 30 + "\n")
                info = self.report['–±–∞–∑–æ–≤–∞—è_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']
                f.write(f"–°—Ç—Ä–æ–∫: {info['–æ–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç—Ä–æ–∫']}\n")
                f.write(f"–°—Ç–æ–ª–±—Ü–æ–≤: {info['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç–æ–ª–±—Ü–æ–≤']}\n")
                f.write(f"–†–∞–∑–º–µ—Ä: {info['—Ä–∞–∑–º–µ—Ä_–≤_–ø–∞–º—è—Ç–∏_–º–±']} –ú–ë\n")
                f.write(f"–°—Ç–æ–ª–±—Ü—ã: {', '.join(info['–Ω–∞–∑–≤–∞–Ω–∏—è_—Å—Ç–æ–ª–±—Ü–æ–≤'])}\n\n")
            
            # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            if '–∫–∞—á–µ—Å—Ç–≤–æ_–¥–∞–Ω–Ω—ã—Ö' in self.report:
                f.write("–ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–•\n")
                f.write("-" * 30 + "\n")
                quality = self.report['–∫–∞—á–µ—Å—Ç–≤–æ_–¥–∞–Ω–Ω—ã—Ö']
                
                if quality['–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ_–∑–Ω–∞—á–µ–Ω–∏—è']['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']:
                    f.write("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n")
                    for col, count in quality['–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ_–∑–Ω–∞—á–µ–Ω–∏—è']['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'].items():
                        percent = quality['–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ_–∑–Ω–∞—á–µ–Ω–∏—è']['–ø—Ä–æ—Ü–µ–Ω—Ç'][col]
                        f.write(f"  {col}: {count} ({percent:.1f}%)\n")
                else:
                    f.write("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n")
                
                f.write(f"–î—É–±–ª–∏–∫–∞—Ç—ã: {quality['–¥—É–±–ª–∏–∫–∞—Ç—ã']['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']} ({quality['–¥—É–±–ª–∏–∫–∞—Ç—ã']['–ø—Ä–æ—Ü–µ–Ω—Ç']}%)\n\n")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' in self.report:
                f.write("–°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó\n")
                f.write("-" * 30 + "\n")
                stats = self.report['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
                
                if '—á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã' in stats:
                    f.write("–ß–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã:\n")
                    for col, col_stats in stats['—á–∏—Å–ª–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã'].items():
                        f.write(f"  {col}:\n")
                        f.write(f"    –°—Ä–µ–¥–Ω–µ–µ: {col_stats['—Å—Ä–µ–¥–Ω–µ–µ']}\n")
                        f.write(f"    –ú–µ–¥–∏–∞–Ω–∞: {col_stats['–º–µ–¥–∏–∞–Ω–∞']}\n")
                        f.write(f"    –î–∏–∞–ø–∞–∑–æ–Ω: {col_stats['–º–∏–Ω–∏–º—É–º']} - {col_stats['–º–∞–∫—Å–∏–º—É–º']}\n")
                
                if '—Ç–µ–∫—Å—Ç–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã' in stats:
                    f.write("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã:\n")
                    for col, col_stats in stats['—Ç–µ–∫—Å—Ç–æ–≤—ã–µ_—Å—Ç–æ–ª–±—Ü—ã'].items():
                        f.write(f"  {col}: {col_stats['—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö_–∑–Ω–∞—á–µ–Ω–∏–π']} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π\n")
        
        logger.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_path}")
        print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_path}")
        
        return str(report_path)
    
    def run_full_analysis(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        """
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
        print("=" * 60)
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if not self.load_data():
                print("‚ùå –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            self.basic_info()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            self.check_data_quality()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            self.statistical_analysis()
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            self.generate_visualizations()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            self.generate_report()
            
            print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.output_dir}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏ —Ñ–∞–π–ª–∞
    """
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–ø—Ü–∏–π
    parser = argparse.ArgumentParser(
        description="üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Excel —Ñ–∞–π–ª–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:
  python analyze_database.py                           # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
  
–ü—Ä—è–º–æ–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞:
  python analyze_database.py file.xlsx                 # –ü—Ä—è–º–æ–π –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
  python analyze_database.py --output-dir results      # –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
    )
    
    parser.add_argument(
        'file', 
        nargs='?', 
        default=None,
        help='–ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é)'
    )
    
    parser.add_argument(
        '--output-dir', '-o',
        default="analysis_results",
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: analysis_results)'
    )
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    Path("logs").mkdir(exist_ok=True)
    
    print("üéØ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† EXCEL –§–ê–ô–õ–û–í")
    print("=" * 60)
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∫–∞–∑–∞–Ω –Ω–∞–ø—Ä—è–º—É—é - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if args.file:
        if not Path(args.file).exists():
            print(f"‚ùå –§–∞–π–ª '{args.file}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print(f"üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã
            excel_files = find_excel_files()
            if excel_files:
                print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ Excel —Ñ–∞–π–ª—ã:")
                for i, file in enumerate(excel_files, 1):
                    print(f"  {i}. {file}")
            
            sys.exit(1)
        
        # –ü—Ä—è–º–æ–π –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"üìÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {args.file}")
        print("=" * 60)
        
        analyzer = DatabaseAnalyzer(args.file)
        if args.output_dir != "analysis_results":
            analyzer.output_dir = Path(args.output_dir)
            analyzer.output_dir.mkdir(exist_ok=True)
        
        analyzer.run_full_analysis()
        sys.exit(0)
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    while True:
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
        selected_mode = interactive_mode_selection()
        if selected_mode is None:
            sys.exit(0)
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        file_path = interactive_file_selection()
        if file_path is None:
            print("\nüîÑ –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞...")
            continue
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        analyzer = DatabaseAnalyzer(file_path)
        if args.output_dir != "analysis_results":
            analyzer.output_dir = Path(args.output_dir)
            analyzer.output_dir.mkdir(exist_ok=True)
        
        try:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if selected_mode['mode'] == 'preview':
                quick_preview_mode(file_path)
                
            elif selected_mode['mode'] == 'full':
                print("\nüöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
                print("=" * 60)
                analyzer.run_full_analysis()
                
            elif selected_mode['mode'] == 'quick':
                print("\nüöÄ –ó–ê–ü–£–°–ö –ë–´–°–¢–†–û–ì–û –ê–ù–ê–õ–ò–ó–ê")
                print("=" * 60)
                if analyzer.load_data():
                    analyzer.basic_info()
                    analyzer.check_data_quality()
                    analyzer.statistical_analysis()
                    analyzer.generate_report()
                    print("\n‚úÖ –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
                    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {analyzer.output_dir}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                    
            elif selected_mode['mode'] == 'no_viz':
                print("\nüöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –ë–ï–ó –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ô")
                print("=" * 60)
                if analyzer.load_data():
                    analyzer.basic_info()
                    analyzer.check_data_quality()
                    analyzer.statistical_analysis()
                    analyzer.generate_report()
                    print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
                    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {analyzer.output_dir}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
        print("\n" + "=" * 60)
        while True:
            try:
                continue_choice = input("üîÑ –í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑? (y/n): ").strip().lower()
                if continue_choice in ['y', 'yes', '–¥', '–¥–∞']:
                    break
                elif continue_choice in ['n', 'no', '–Ω', '–Ω–µ—Ç']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    sys.exit(0)
                else:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ 'y' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ 'n' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                sys.exit(0)


if __name__ == "__main__":
    main() 