"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è FTS5 –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞–Ω–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö knowledge_base_v2.db
2. –°–æ–∑–¥–∞–µ—Ç FTS5 –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
3. –ó–∞–ø–æ–ª–Ω—è–µ—Ç FTS –∏–Ω–¥–µ–∫—Å –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã chunks
4. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python build_fts_index.py

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
    FTS5 –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç FAISS –∏–Ω–¥–µ–∫—Å–∞ –∏ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞
    —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
    unicode61 –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
"""
import os
import sqlite3
import logging
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('build_fts_index')

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.path.join(os.getcwd(), 'knowledge_base_v2.db')

def create_fts_index():
    """
    –°–æ–∑–¥–∞–µ—Ç FTS5 –∏–Ω–¥–µ–∫—Å –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã chunks.
    
    –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É FTS5, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
    —Ç–∞–±–ª–∏—Ü–µ–π chunks, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ—ë –¥–∞–Ω–Ω—ã–º–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.
    """
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ FTS5 –∏–Ω–¥–µ–∫—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not Path(DB_PATH).exists():
        logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DB_PATH}")
        logger.error("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python load_excel_to_vectordb.py")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã chunks
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='chunks'")
        if not cursor.fetchone():
            logger.error("–¢–∞–±–ª–∏—Ü–∞ 'chunks' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ chunks
        cursor.execute("SELECT COUNT(*) FROM chunks")
        count = cursor.fetchone()[0]
        if count == 0:
            logger.error("–í —Ç–∞–±–ª–∏—Ü–µ 'chunks' –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
            return False
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ 'chunks'")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π FTS –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        cursor.execute("DROP TABLE IF EXISTS chunks_fts")
        logger.info("–û—á–∏—â–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π FTS –∏–Ω–¥–µ–∫—Å")
        
        # –°–æ–∑–¥–∞–µ–º FTS5 –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute('''
            CREATE VIRTUAL TABLE chunks_fts USING fts5(
                chunk_text,
                content='chunks',
                content_rowid='id',
                tokenize="unicode61 remove_diacritics 2"
            );
        ''')
        logger.info("–°–æ–∑–¥–∞–Ω–∞ FTS5 –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º FTS –∏–Ω–¥–µ–∫—Å –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ó–∞–ø–æ–ª–Ω—è–µ–º FTS –∏–Ω–¥–µ–∫—Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã chunks...")
        cursor.execute("INSERT INTO chunks_fts(chunks_fts) VALUES('rebuild');")
        logger.info("FTS –∏–Ω–¥–µ–∫—Å –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–∞–Ω–Ω—ã–º–∏")
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        logger.info("–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º FTS –∏–Ω–¥–µ–∫—Å...")
        cursor.execute("INSERT INTO chunks_fts(chunks_fts) VALUES('optimize');")
        logger.info("FTS –∏–Ω–¥–µ–∫—Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        cursor.execute("SELECT COUNT(*) FROM chunks_fts")
        fts_count = cursor.fetchone()[0]
        logger.info(f"FTS –∏–Ω–¥–µ–∫—Å —Å–æ–¥–µ—Ä–∂–∏—Ç {fts_count} –∑–∞–ø–∏—Å–µ–π")
        
        if fts_count != count:
            logger.warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π: chunks={count}, fts={fts_count}")
        
        logger.info("‚úÖ FTS5 –∏–Ω–¥–µ–∫—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
        
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ FTS –∏–Ω–¥–µ–∫—Å–∞: {str(e)}")
        return False
    
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ FTS –∏–Ω–¥–µ–∫—Å–∞: {str(e)}", exc_info=True)
        return False
    
    finally:
        if conn:
            conn.close()

def test_fts_search():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π FTS –∏–Ω–¥–µ–∫—Å —Å –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º.
    """
    logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º FTS –∏–Ω–¥–µ–∫—Å...")
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_query = "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
        
        sql = """
        SELECT 
            chunks.chunk_id,
            chunks.document_id,
            chunks.doc_type_short,
            snippet(chunks_fts, 0, '<b>', '</b>', '...', 10) AS snippet,
            bm25(chunks_fts) AS rank
        FROM chunks_fts
        JOIN chunks ON chunks.id = chunks_fts.rowid
        WHERE chunks_fts MATCH ?
        ORDER BY rank
        LIMIT 3
        """
        
        cursor.execute(sql, (test_query,))
        results = cursor.fetchall()
        
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å '{test_query}' –≤–µ—Ä–Ω—É–ª {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for i, (chunk_id, doc_id, doc_type, snippet, rank) in enumerate(results, 1):
            logger.info(f"  {i}. {chunk_id} ({doc_type}) - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {rank:.3f}")
            logger.info(f"     –û—Ç—Ä—ã–≤–æ–∫: {snippet}")
        
        conn.close()
        
        if results:
            logger.info("‚úÖ FTS –∏–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è FTS –∏–Ω–¥–µ–∫—Å –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ FTS –∏–Ω–¥–µ–∫—Å–∞: {str(e)}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FTS5 –∏–Ω–¥–µ–∫—Å–∞.
    """
    print("üîç –°–û–ó–î–ê–ù–ò–ï FTS5 –ò–ù–î–ï–ö–°–ê")
    print("=" * 60)
    print(f"üìÑ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    print("üî§ –¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä: unicode61 (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)")
    print("=" * 60)
    
    # –ó–∞–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    start_time = time.time()
    
    # –°–æ–∑–¥–∞–µ–º FTS –∏–Ω–¥–µ–∫—Å
    success = create_fts_index()
    
    if success:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        test_fts_search()
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        elapsed_time = time.time() - start_time
        print(f"\n‚úÖ FTS5 –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python -m utils.fts_search (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥—É–ª—è)")
        print("  2. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –±–æ—Ç–∞")
        print("  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞")
        
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò FTS –ò–ù–î–ï–ö–°–ê!")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π")

if __name__ == "__main__":
    main() 